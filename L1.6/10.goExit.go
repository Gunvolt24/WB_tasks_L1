//go:build ignore

package main

import (
	"fmt"
	"runtime"
	"sync"
)

// Способ выхода из горутины №10: остановка горутины с использованием runtime.Goexit().
// runtime.Goexit() корректно завершает горутину, вызывая все отложенные функции.
//
// Данный способ полезен, когда нужно завершить горутину изнутри, например, после выполнения определенной задачи или при возникновении ошибки.
// Позволяет избежать утечек ресурсов и гарантирует корректное завершение горутины.
//
// Важно помнить, что runtime.Goexit() не завершает родительскую горутину, и она будет ждать завершения всех дочерних горутин.
// Поэтому его нужно использовать внутри самой горутины, которую нужно завершить.
//
// Важное свойство Goexit: запускает все defer горутины (в данном случае внутри worker), но не запускает defer в вызывающей функции main.
func main() {
	var wg sync.WaitGroup

	// Запускаем несколько горутин
	for i := range 5 {
		wg.Add(1)
		go worker(i, &wg)
	}

	wg.Wait()

	fmt.Println("Все горутины закончили работу.")
}

func worker(id int, wg *sync.WaitGroup) {
	defer wg.Done()
	defer fmt.Printf("Горутина %d: defer выполнен\n", id) // доказательство, что defer отработал

	fmt.Printf("Горутина %d запущена\n", id)

	for i := range 10 {
		fmt.Printf("Горутина %d работает над задачей %d\n", id, i)
		if i == 5 {
			fmt.Printf(" i == 5, горутина %d завершает работу с помощью runtime.Goexit()\n", id)
			// Вызов runtime.Goexit() для корректного завершения горутины
			runtime.Goexit()
		}
	}
	// Если мы дошли до этого места, то код не будет выполнен, так как горутина завершится на i == 5
}
